{"version":3,"sources":["components/UnitSwitcher.js","components/Temperature.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["UnitButton","props","w","h","bg","unit","name","_focus","boxShadow","borderRadius","onClick","handleClick","showName","UnitSwitcher","my","px","py","spacing","Temperature","tem","handleChange","handleBlur","display","value","type","overflow","textAlign","border","fontSize","onChange","onBlur","App","useState","setUnit","color","setColor","celsius","fahrenheit","kelvin","setTem","useEffect","theme","align","justify","direction","charAt","toUpperCase","slice","e","target","cToFahr","cToKel","Math","round","fToCel","fToKel","kToCel","kToFahr","href","isExternal","_hover","underline","verticalAlign","as","FaGithub","pl","FaVuejs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2684139c.chunk.js","sourcesContent":["import { Box, Button, HStack } from '@chakra-ui/react';\r\n\r\nconst UnitButton = props => {\r\n  return (\r\n    <Button\r\n      w=\"12\"\r\n      h=\"12\"\r\n      bg={props.unit === props.name ? 'white' : 'none'}\r\n      _focus={{ boxShadow: 'lg' }}\r\n      boxShadow={props.unit === props.name ? 'lg' : 'none'}\r\n      borderRadius=\"50\"\r\n      onClick={() => props.handleClick(props.name)}\r\n    >\r\n      {props.showName}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst UnitSwitcher = ({ unit, handleClick }) => {\r\n  return (\r\n    <Box my=\"4\">\r\n      <HStack\r\n        px=\"2\"\r\n        py=\"2\"\r\n        bg=\"gray.100\"\r\n        borderRadius=\"50\"\r\n        boxShadow=\"inner\"\r\n        spacing=\"24px\"\r\n      >\r\n        <UnitButton\r\n          handleClick={handleClick}\r\n          unit={unit}\r\n          showName=\"°C\"\r\n          name=\"celsius\"\r\n        />\r\n        <UnitButton\r\n          handleClick={handleClick}\r\n          unit={unit}\r\n          showName=\"°F\"\r\n          name=\"fahrenheit\"\r\n        />\r\n        <UnitButton\r\n          handleClick={handleClick}\r\n          unit={unit}\r\n          showName=\"K\"\r\n          name=\"kelvin\"\r\n        />\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnitSwitcher;\r\n","import { Box, Input } from '@chakra-ui/react';\r\n\r\nconst Temperature = ({ tem, handleChange, handleBlur, unit }) => {\r\n  return (\r\n    <Box>\r\n      <Input\r\n        display=\"inline\"\r\n        value={tem[unit]}\r\n        type=\"number\"\r\n        w=\"48\"\r\n        h=\"auto\"\r\n        overflow=\"visible\"\r\n        textAlign=\"center\"\r\n        border=\"none\"\r\n        fontSize=\"5xl\"\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Temperature;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n  ChakraProvider,\n  Text,\n  Link,\n  HStack,\n  Flex,\n  theme,\n  Icon,\n} from '@chakra-ui/react';\n\nimport UnitSwitcher from './components/UnitSwitcher';\nimport Temperature from './components/Temperature';\n\nimport { FaVuejs, FaGithub } from 'react-icons/fa';\n\nfunction App() {\n  const [unit, setUnit] = useState('celsius');\n  const [color, setColor] = useState('teal.300');\n  const [tem, setTem] = useState({\n    celsius: 0,\n    fahrenheit: 32,\n    kelvin: 273.15,\n  });\n\n  const handleClick = unit => {\n    setUnit(unit);\n  };\n\n  const handleBlur = e => {\n    const value = e.target.value;\n    if (!value) {\n      setTem({\n        ...tem,\n        [unit]: 0,\n      });\n    }\n  };\n\n  const handleChange = e => {\n    const value = e.target.value;\n    const cToFahr = value => (value * 9) / 5 + 32;\n    const cToKel = value => (value * 100 + 27315) / 100;\n    const fToCel = value => Math.round((((value - 32) * 5) / 9) * 100) / 100;\n    const fToKel = value => Math.round(((value * 100 + 45967) * 5) / 9) / 100;\n    const kToCel = value => Math.round(value * 100 - 27315) / 100;\n    const kToFahr = value => Math.round(((value * 9) / 5) * 100 - 45967) / 100;\n\n    if (unit === 'celsius') {\n      setTem({\n        [unit]: value,\n        fahrenheit: cToFahr(value),\n        kelvin: cToKel(value),\n      });\n    } else if (unit === 'fahrenheit') {\n      setTem({\n        [unit]: value,\n        celsius: fToCel(value),\n        kelvin: fToKel(value),\n      });\n    } else {\n      setTem({\n        [unit]: value,\n        celsius: kToCel(value),\n        fahrenheit: kToFahr(value),\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (tem.celsius > 28) {\n      setColor('red.300');\n    } else if (tem.celsius < 28) {\n    }\n  }, [tem.celsius]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex\n        w=\"100vw\"\n        h=\"100vh\"\n        bg={color}\n        align=\"center\"\n        justify=\"center\"\n        direction=\"column\"\n      >\n        <Flex\n          w=\"96\"\n          h=\"80\"\n          bg=\"white\"\n          borderRadius=\"2xl\"\n          direction=\"column\"\n          justify=\"center\"\n          align=\"center\"\n        >\n          <Text fontSize=\"2xl\">Temperature coventer</Text>\n          <UnitSwitcher unit={unit} handleClick={handleClick} />\n          <Text fontSize=\"xl\">\n            {unit.charAt(0).toUpperCase() + unit.slice(1)}\n          </Text>\n          <Temperature\n            handleChange={handleChange}\n            handleBlur={handleBlur}\n            unit={unit}\n            tem={tem}\n          />\n        </Flex>\n        <Flex\n          w=\"96\"\n          bg=\"white\"\n          borderRadius=\"xl\"\n          my=\"2\"\n          py=\"4\"\n          justify=\"center\"\n          color=\"gray.400\"\n        >\n          <HStack spacing=\"24px\">\n            <Link\n              href=\"https://github.com/indexhui/react-temperature-converter\"\n              isExternal\n              _hover={{ color: 'gray.700', underline: 'none' }}\n              verticalAlign=\"middle\"\n              display=\"inlineBlock\"\n            >\n              <Icon verticalAlign=\"middle\" as={FaGithub} />\n              <Text verticalAlign=\"middle\" display=\"inline\" pl=\"1\">\n                Github\n              </Text>\n            </Link>\n            <Link\n              href=\"https://indexhui.github.io/vue-temperature-converter/\"\n              isExternal\n              _hover={{ color: 'gray.700', underline: 'none' }}\n            >\n              <Icon verticalAlign=\"middle\" as={FaVuejs} />\n              <Text\n                verticalAlign=\"middle\"\n                display=\"inline\"\n                pl=\"1\"\n                fontSize=\"sm\"\n              >\n                Vue\n              </Text>\n            </Link>\n          </HStack>\n        </Flex>\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}